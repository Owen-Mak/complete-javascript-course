2-JS-basics

2 ways to add javascript
1) inline script  <script> </script>
2) external script
    a) create new js file
    b) add source code
    c) add script tag with tag src={file name}
    preferred method is to have code on external file 
    - allows us to keep html and js in seperate file

Intro:
Relationship between html, css, js
 Html: content (text, images, buttons) - nouns
 css: presentation (styling, layouts) - adjectives, describes the nouns
 js: dynamic effects, programming - verb, doing something

 Datatypes
 Number, string, boolean, 
 undefined - data type of a variable that does not have a value yet (uninitialized?); declare variable without assignment
 null - means non-existent, more specific than undefined

dynamic typing - do not have to manually define a data type

convention: camel case 
rules - cannot start variable with a number
    - can start with dollar sign or underscore
    - cannot start with keywords

Variable Mutation and Type Coercion
type coercion - javascript automatically converts one type to another as it is needed
variable mutation - change value of a variable? does he mean data type as well?

operators
associativity - the direction in which operators are executed

Truthy - all values considered true in an if-else statement; all values that are not falsy
Falsy -  undefined, null, zero, empty string and not a number (NaN)
  - not exaclty false, but will become false if evaluated in an if-else statement

  statement - does not return anything
  expression - pieces of code always produce a value;  does not matter how long they are, always returns a value

*************************************
3-how-JS-works
where is it used?
- most typically hosted in a browser; applications that accept javascript input; node js server

javascript engine - program that executes javascript code

code -> parser -> (abstract syntax tree) -> machine code (byte code) -> execute code

execution context -> environments to run javascript (aka box, container); stores variables in which code is executed
    - contains variable object (VO), scope chain, this variable
- default context is global execution context (variables and functions not inside of any function)
- ALL code not inside a function is executed

global object - in a browser, window object; associated with global execution context
    - anything declared in global object is attached to window object

- each time a new funciton is called , it gets its own execution context

hoisting - act of moving all declarations to the top of the scope; allows variables/functions to be used before they are declared
    - functions and variables are avaialble and defined before execution phase starts
    - variables are set as undefined before the execution phase

creation phase vs execution phase
creation phase - first scan of all variables and functions;  variables are set as undefined; both accesible
execution phase - runs line by line of the functions that are called; each called function gets its own execution context

Scoping - where can we access a certain variable?
    - each new function creates a scope - ONLY NEW FUNCTIONS have scopes

Lexical scoping - a function that is written inside another function gets access to the scope of the outer (parent) function including it's function and variables

Parent scopes do NOT have access to it's children's functions and variables
NOTE: Execution stack is different from scope chain
Hence, scope chain is an arrow moving upwards towards the global scope 

This Variable
- each context gets this variable
- each execution context contains it

In a regular function call, this points to the global object (ie. window object)
In a method call (a function attached to an object), this varialbe points to the calling method
-  this keyword is not assigned a value until a function where it is defined is actually called

*************************************
4. JavaScript in the Browser DOM Manipulation and Events

Document Object Model
- structured representation of HTML Document
- used to connect the webpage to javascript

Events
message queue - all events in the browser waiting to be processed
    - events only start getting processed once execution stack is empty
event listener - reacts to events and executes code accordingly


*************************************
5. Advanced-JS
"Everything is an object"
- only thing not objects are primitives (numbers, strings, booleans...)

using constructors as a blueprint

JS is a prototyped based language
- each object has a prototype property
- this allows inheritence in objects
- the prototype property is where we put methods and properties that we want other objects to inherit
- the Constructor's prototype property is NOT the prototype of the Constructor itself, but it's the prototype of ALL instances that are created through it

Prototype chain - when a method is called, we try to access it in current object
 - if method is not found, go to the object's prototype property, which is the prototype property of parent
 - moves up in a prototype chain
 - null is the only object without prototype, and it is final destination of the search

__proto__ vs prototype:
__proto__ is the actual object that is used in the lookup chain to resolve methods, etc. 
prototype is the object that is used to build __proto__ when you create an object with new:
 
Inheritence:
    - Difference between Object.create() method vs function constructor method:
    1) Object.create() method builds an object that inherits directly from the first argument passed into .create()
    2) function constructor inherits from the constructor's prototype property

Primitives vs Objects
- variables containing primitives actually hold the data itself; each variable hold their own copy of data
- variables for objects contain a reference to where the object is stored

Functions
- is an instance of Object type
- behaves like any other object
- can be stored in a variable, passed into other functions as an argument

First class function - (From MDN)
"A programming language is said to have First-class functions when functions in that language are treated like any other variable. 
For example, in such a language, a function can be passed as an argument to other functions, can be returned by another function and can be assigned as a value to a variable."

Closures:
An inner function always has access to the variables and parameters of its outer function, even after the outer function has returned

/************* 6. Putting It All Together The Budget App Project **********************/

Modules:
- keep units of code for a project both cleanly separated and organized
- encapsulate some data into privacy and expose other data publicly

Module pattern:
- keep pieces of code that are related inside of separate, independent, and organized units
- functions that are private -> only accessible inside of the Module
- functions that are public -> can be used outside of the module
- tools: closures and IIFE

Event delegation - used when interacting with DOM
event bubbling - when event is fired/triggered, exact same event is triggered on all of its parents, one at a time, all the way to root element
    - parent will know where the event was first fired
    - this means we can attach event handler on parent element to catch the element
event delegation - set up the event handler on parent element to make use of event bubbling
    - use case 1) lots of child elements
    - use case 2) when we want an event handler attached to an element that is not yet in the DOM

/***********  ES 6 *******************************************************************/
let - similar to var?? nope, var is function scoped, but let is block scoped
    - does not get hoisted like var ... temporal dead zone
const - constants, values we do not want to change; NOTE: const must be used in same block as declaration